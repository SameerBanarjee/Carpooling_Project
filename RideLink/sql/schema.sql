-- Create Profiles table
-- This table will store user-specific data that is safe to be publicly exposed.
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  full_name text,
  avatar_url text,
  mobile_number text,
  user_type text not null,
  updated_at timestamp with time zone,

  primary key (id)
);
-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;
-- Allow public read access to all profiles
create policy "Public profiles are viewable by everyone." on public.profiles for select using (true);
-- Allow users to insert their own profile
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);
-- Allow users to update their own profile
create policy "Users can update own profile." on public.profiles for update using (auth.uid() = id);


-- Create Rides table
create table public.rides (
  id bigint generated by default as identity primary key,
  driver_id uuid not null references public.profiles(id),
  driver_name text not null,
  driver_avatar_url text not null,
  origin text not null,
  destination text not null,
  departure_date date not null,
  departure_time time not null,
  available_seats int not null,
  price_per_seat numeric(10, 2) not null,
  status text not null default 'Upcoming', -- e.g., Upcoming, In Progress, Completed, Cancelled
  created_at timestamp with time zone not null default now()
);
-- Set up Row Level Security (RLS)
alter table public.rides enable row level security;
-- Allow public read access to all rides
create policy "Rides are viewable by everyone." on public.rides for select using (true);
-- Allow authenticated users to create rides
create policy "Authenticated users can create rides." on public.rides for insert with check (auth.role() = 'authenticated');
-- Allow drivers to update their own rides
create policy "Drivers can update their own rides." on public.rides for update using (auth.uid() = driver_id);


-- Create Bookings table
create table public.bookings (
  id bigint generated by default as identity primary key,
  ride_id bigint not null references public.rides(id),
  passenger_id uuid not null references public.profiles(id),
  seats_booked int not null,
  booking_status text not null default 'Confirmed', -- e.g., Confirmed, Cancelled
  created_at timestamp with time zone not null default now()
);
-- Set up Row Level Security (RLS)
alter table public.bookings enable row level security;
-- Allow users to see their own bookings
create policy "Users can view their own bookings." on public.bookings for select using (auth.uid() = passenger_id);
-- Allow users to see bookings for rides they created
create policy "Drivers can view bookings for their rides." on public.bookings for select using (
  exists (
    select 1 from rides where rides.id = bookings.ride_id and rides.driver_id = auth.uid()
  )
);
-- Allow authenticated users to create bookings
create policy "Authenticated users can create bookings." on public.bookings for insert with check (auth.role() = 'authenticated');
-- Allow users to update (e.g., cancel) their own bookings
create policy "Users can update their own bookings." on public.bookings for update using (auth.uid() = passenger_id);
